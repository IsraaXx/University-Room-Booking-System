name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  MAVEN_OPTS: -Dfile.encoding=UTF-8
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.6'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Cache Maven wrapper
      uses: actions/cache@v4
      with:
        path: ~/.m2/wrapper
        key: ${{ runner.os }}-maven-wrapper-${{ hashFiles('**/.mvn/wrapper/maven-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-maven-wrapper

    - name: Validate Maven wrapper
      run: ./mvnw --version

    - name: Run Maven build with quality checks
      run: |
        ./mvnw clean install \
          -Dmaven.test.failure.ignore=false \
          -Dcheckstyle.failOnViolation=true \
          -Dspotbugs.failOnError=true \
          -Djacoco.check.lineCoverage=0.80 \
          -Djacoco.check.branchCoverage=0.75

    - name: Upload JUnit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/failsafe-reports/
        retention-days: 30

    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: target/site/jacoco/
        retention-days: 30

    - name: Upload Checkstyle report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: checkstyle-report
        path: target/checkstyle-result.xml
        retention-days: 30

    - name: Upload SpotBugs report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-report
        path: target/spotbugsXml.xml
        retention-days: 30

    - name: Upload OWASP Dependency Check report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: target/dependency-check-report.html
        retention-days: 30

    - name: Upload Maven site
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: maven-site
        path: target/site/
        retention-days: 30

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const jacocoXml = fs.readFileSync('target/site/jacoco/jacoco.xml', 'utf8');
            const coverageMatch = jacocoXml.match(/<counter type="LINE" missed="(\d+)" covered="(\d+)"/);
            
            if (coverageMatch) {
              const missed = parseInt(coverageMatch[1]);
              const covered = parseInt(coverageMatch[2]);
              const total = missed + covered;
              const percentage = ((covered / total) * 100).toFixed(2);
              
              const comment = `## 📊 Test Coverage Report
              
              **Line Coverage**: ${percentage}% (${covered}/${total})
              **Branch Coverage**: Available in the uploaded JaCoCo report
              
              📁 **Reports Available**:
              - Test Results: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - Coverage Report: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - Code Quality: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read coverage report:', error.message);
          }

  security:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Run OWASP Dependency Check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -Dformat=HTML \
          -DfailOnCVSS=7 \
          -DskipOnError=true \
          -DfailOnError=false \
          -DautoUpdate=false

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html
        retention-days: 30

  quality-gates:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Run quality checks
      run: |
        ./mvnw clean verify \
          -Dmaven.test.failure.ignore=false \
          -Dcheckstyle.failOnViolation=true \
          -Dspotbugs.failOnError=true \
          -Djacoco.check.lineCoverage=0.80 \
          -Djacoco.check.branchCoverage=0.75

    - name: Quality Gate Summary
      run: |
        echo "## 🎯 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Build Status**: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Test Coverage**: Above 80% threshold" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Code Quality**: Checkstyle and SpotBugs passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Security**: OWASP Dependency Check completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All quality gates have been passed successfully!" >> $GITHUB_STEP_SUMMARY
